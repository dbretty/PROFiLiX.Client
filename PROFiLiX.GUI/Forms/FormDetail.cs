// <auto-generated/>
using PROFiLiX.Common.Configuration;
using PROFiLiX.Common.User.Model;
using PROFiLiX.GUI.General;
using Microsoft.Win32;

namespace PROFiLiX.GUI.Forms
{
    public partial class FormDetail : Form
    {
        private string userProfileType;
        private string userName;
        private string profileDirectory;
        private ProfileTypeDefinition profileTypeDefinition;

        GUIElements guiElements = new GUIElements();
        IAppConfig PROFiLiX = new AppConfig();

        public FormDetail(string userProfileType, ProfileTypeDefinition profileTypeDefinition, string userName, string profileDirectory)
        {
            PROFiLiX.Logger.LogAsync($"Loading profile information for: {PROFiLiX.UserDetail.UserName}");
            InitializeComponent();
            this.userProfileType = userProfileType;
            this.userName = userName;
            this.profileDirectory = profileDirectory;
            this.profileTypeDefinition = profileTypeDefinition;
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            PROFiLiX.Logger.LogAsync($"Closing profile information screen");
            this.Close();
        }

        private async void FormDetail_Load(object sender, EventArgs e)
        {
            this.Location = new Point(((Screen.PrimaryScreen.WorkingArea.Width - this.Width) - FormMain.ActiveForm.Width) - 3, (Screen.PrimaryScreen.WorkingArea.Height - this.Height));
            guiElements.UpdateLabel(this.lblProfileDetail, $"Profile Detail for {this.userName} ({this.profileDirectory})");

            EnableUi(false, "Loading profile detail");

            guiElements.ClearDataGrid(this.dgProfileDetails);
            guiElements.ClearDataGrid(this.dgFolderRedirection);

            switch (profileTypeDefinition)
            {
                case ProfileTypeDefinition.Local:
                    await PROFiLiX.Logger.LogAsync($"Loading profile information: Local");
                    var profileDetails = await PROFiLiX.Registry.GetRegistryPathValueAsync(PROFiLiX.UserProfile.LocalRootKey, RegistryHive.CurrentUser);
                    guiElements.UpdateDataGridPathValue(profileDetails, this.dgProfileDetails);
                    break;
                case ProfileTypeDefinition.Citrix:
                    await PROFiLiX.Logger.LogAsync($"Loading profile information: Citrix Profile Management");
                    var citrixProfileDetails = await PROFiLiX.Registry.GetRegistryPathValueAsync(PROFiLiX.UserProfile.CitrixRootKey, RegistryHive.LocalMachine);
                    guiElements.UpdateDataGridPathValue(citrixProfileDetails, this.dgProfileDetails);
                    break;
                case ProfileTypeDefinition.FSLogix:
                    await PROFiLiX.Logger.LogAsync($"Loading profile information: Microsoft FSLogix");
                    var fslogixProfileDetails = await PROFiLiX.Registry.GetRegistryPathValueAsync(PROFiLiX.UserProfile.FSLogixRootKey, RegistryHive.LocalMachine);
                    guiElements.UpdateDataGridPathValue(fslogixProfileDetails, this.dgProfileDetails);
                    break;
				case ProfileTypeDefinition.Liquidware:
					await PROFiLiX.Logger.LogAsync($"Loading profile information: Liquidware ProfileUnity");
					var liquidwareProfileDetails = await PROFiLiX.Registry.GetRegistryPathValueAsync(PROFiLiX.UserProfile.LiquidwareRootKey, RegistryHive.LocalMachine);
					guiElements.UpdateDataGridPathValue(liquidwareProfileDetails, this.dgProfileDetails);
					break;
				default:
                    break;
            }

            await PROFiLiX.Logger.LogAsync($"Loading profile folder redirection information");
            var folderRefirectionDetails = await PROFiLiX.Registry.GetRegistryPathValueAsync(PROFiLiX.UserProfile.ShellFolders, RegistryHive.CurrentUser);
            guiElements.UpdateDataGridPathValue(folderRefirectionDetails, this.dgFolderRedirection);

            guiElements.SizeDataGrid(this.dgProfileDetails);
            guiElements.SizeDataGrid(this.dgFolderRedirection);

            EnableUi(true);
        }

        private void btnProfileDetailsSort_Click(object sender, EventArgs e)
        {
            PROFiLiX.Logger.LogAsync($"Sorting profile information data grid");
            guiElements.SortDataGrid(this.dgProfileDetails, this.btnProfileDetailsSort);
        }

        private void btnFolderRedirectionSort_Click(object sender, EventArgs e)
        {
            PROFiLiX.Logger.LogAsync($"Sorting folder redirection information data grid");
            guiElements.SortDataGrid(this.dgFolderRedirection, this.btnFolderRedirectionSort);
        }

        private void EnableUi(bool enabled, string labelText = "Ready")
        {
            if (enabled)
            {
                this.pbMain.MarqueeAnimationSpeed = 0;
                this.pbMain.Refresh();
            }
            else
            {
                this.pbMain.MarqueeAnimationSpeed = 100;
                this.pbMain.Refresh();
            }

            this.btnExit.Enabled = enabled;
            this.lblStatus.Text = labelText;
        }
    }
}
